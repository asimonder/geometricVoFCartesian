/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2021 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
                            | Copyright (C) 2021 Asim Onder
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "youngCartesian.H"
#include "fvc.H"
#include "leastSquareGrad.H"
#include "addToRunTimeSelectionTable.H"
#include "globalIndex.H"

// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

namespace Foam
{
namespace reconstruction
{
    defineTypeNameAndDebug(youngCartesian, 0);
    addToRunTimeSelectionTable(reconstructionSchemes, youngCartesian, components);
}
}


// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
Foam::List<Foam::scalar> Foam::reconstruction::youngCartesian::getStencil(const Map<scalar>& phiIJK,label celli)
{
  const label iMax=1;
  const volVectorField& C = mesh_.C();
  point Pmin=ijkMesh_.Pmin();
  point Pmax=ijkMesh_.Pmax();
  const scalar dx=ijkMesh_.dx();
  const scalar dy=ijkMesh_.dy();
  const scalar dz=ijkMesh_.dz();
  const label Nx=ijkMesh_.Nx();
  const label Ny=ijkMesh_.Ny();
  const label Nz=ijkMesh_.Nz();
  const labelList& globalIds=ijkMesh_.globalIds();
 
  bool is2D=false;
  List<scalar> A;
  if (Ny==1 || Nz==1)
    {
      is2D=true;
      A.setSize(9,0.0);
    }
  else
    A.setSize(27,0.0);
  
  const point cc = C[celli];
  //  Info<<"Point: "<<cc<<endl;
  bool isActive=true;
  if (Nz==1)
    {
      if (cc.y()>(Pmin.y()-1e-12+iMax*dy) && cc.y()<(Pmax.y()+1e-12-iMax*dy))
	isActive=true;
    }	      
  else if (Ny==1)
    {
      if (cc.z()>(Pmin.z()-1e-12+iMax*dz) && cc.z()<(Pmax.z()+1e-12-iMax*dz))
	isActive=true;
    }
  else
    {
      isActive=false;
    }
	      
  if (isActive)
    {
      label iP=round((cc.x()-Pmin.x())/dx);
      label jP=round((cc.y()-Pmin.y())/dy);
      label kP=round((cc.z()-Pmin.z())/dz);
      int il,jl,kl=0;
      
      if (is2D)
	{
	  for (int i=-1;i<2;i++)//normal direction
	    {
	      for (int j=-1;j<2;j++)//tangent
		{
		  il=(iP+i+Nx)%Nx;
		  if (Ny==1)
		    {
		      kl=(kP+j);
		      jl=0;
		    }
		  else
		    {
		      jl=(jP+j);
		      kl=0;
		    }
		  label ijkG=il+Nx*jl+Nx*Ny*kl;
		  label gblIdx=globalIds[ijkG];
		  A[a2(i,j)]=phiIJK[gblIdx];	
		}
	    }
	}
      else
	{
	   for (int i=-1;i<2;i++)//normal direction
	    {
	      for (int j=-1;j<2;j++)//tangent
		{
		  for (int k=-1;k<2;k++)//tangent
		    {
		      label il=(iP+i+Nx)%Nx;
		      label jl=(jP+j+Ny)%Ny;
		      label kl=(kP+k);
		      label ijkG=il+Nx*jl+Nx*Ny*kl;
		      label gblIdx=globalIds[ijkG];
		      A[a3(i,j,k)]=phiIJK[gblIdx];
		    }
		}
	    }
	}


    }

  return A;
}

Foam::vector Foam::reconstruction::youngCartesian::calcYoungNormal(const List<scalar>& A) //stencil)
{
  const scalar dx=ijkMesh_.dx();
  const label Ny=ijkMesh_.Ny();
  vector m(0.0,0.0,0.0);
  bool is2D=false;
  if (A.size()==9)
    is2D=true;

  int i,j,k=0;
  if (is2D)
    {
      m.x()=1./8./dx*(A[a2(i+1,j+1)]-A[a2(i-1,j+1)]+2.0*A[a2(i+1,j)]-2.0*A[a2(i-1,j)]+A[a2(i+1,j-1)]-A[a2(i-1,j-1)]);
      scalar mT=1./8./dx*(A[a2(i+1,j+1)]-A[a2(i+1,j-1)]+2.0*A[a2(i,j+1)]-2.0*A[a2(i,j-1)]+A[a2(i-1,j+1)]-A[a2(i-1,j-1)]);
      if (Ny==1)
	{
	  m.y()=0;
	  m.z()=mT;
	}
      else
	{
	  m.y()=mT;
	  m.z()=0;
	}

    }
  else
    {
      m.x()=1./8./dx*(A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+
		      A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+
		      A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]+A[a3(i+1,j+1,k+1)]);
      
    }

  return m;
}


Foam::vector Foam::reconstruction::youngCartesian::calcCCDNormal(const List<scalar>& A) //stencil)
{
  const scalar dx=ijkMesh_.dx();
  const label Ny=ijkMesh_.Ny();
  vector m(0.0,0.0,0.0);
  bool is2D=false;
  if (A.size()==9)
    is2D=true;

  int i,j,k=0;
  scalar mxc,myc,mxb,myb,mxf,myf=0;
  if (is2D)
    {
      for (int j=-1;j<2;j++)
	{
	  mxc+=(A[a2(i+1,j)]-A[a2(i-1,j)])/2.0;
	  myc+=(A[a2(j,i+1)]-A[a2(j,i-1)])/2.0;
	  mxb+=(A[a2(i,j)]-A[a2(i-1,j)])/2.0;
	  myb+=(A[a2(j,i)]-A[a2(j,i-1)])/2.0;
	  mxf+=(A[a2(i+1,j)]-A[a2(i,j)])/2.0;
	  myf+=(A[a2(j,i+1)]-A[a2(j,i)])/2.0;
	}

      /*if (mxc>myc)
	{
	  
	}
      else
	{

	}*/
      
      m.x()=1./8./dx*(A[a2(i+1,j+1)]-A[a2(i-1,j+1)]+2.0*A[a2(i+1,j)]-2.0*A[a2(i-1,j)]+A[a2(i+1,j-1)]-A[a2(i-1,j-1)]);
      scalar mT=1./8./dx*(A[a2(i+1,j+1)]-A[a2(i+1,j-1)]+2.0*A[a2(i,j+1)]-2.0*A[a2(i,j-1)]+A[a2(i-1,j+1)]-A[a2(i-1,j-1)]);
      if (Ny==1)
	{
	  m.y()=0;
	  m.z()=mT;
	}
      else
	{
	  m.y()=mT;
	  m.z()=0;
	}

    }

}

void Foam::reconstruction::youngCartesian::gradSurf(const volScalarField& phi)
{

  label iMax=1;
  Map<scalar> phiIJK;
  Vector<label> stencilSize(iMax,iMax,iMax);
  ijkMesh_.getZoneField(interfaceCell_,phiIJK,phi,stencilSize);

  forAll(interfaceLabels_, i)
    {
      label celli=interfaceLabels_[i];
      List<scalar> A=getStencil(phiIJK,celli);
      interfaceNormal_[i] = calcYoungNormal(A);
    }
  
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::reconstruction::youngCartesian::youngCartesian
(
    volScalarField& alpha1,
    const surfaceScalarField& phi,
    const volVectorField& U,
    const dictionary& dict
)
:
    reconstructionSchemes
    (
        typeName,
        alpha1,
        phi,
        U,
        dict
    ),
    mesh_(alpha1.mesh()),
    interfaceNormal_(fvc::grad(alpha1)),
    isoFaceTol_(modelDict().lookupOrDefault<scalar>("isoFaceTol", 1e-8)),
    surfCellTol_(modelDict().lookupOrDefault<scalar>("surfCellTol", 1e-8)),
    sIterPLIC_(mesh_,surfCellTol_),
    //globalNumbering_(mesh_.nCells()+mesh_.nBoundaryFaces()),
    ijkMesh_(mesh_)
{  
  reconstruct();
}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

void Foam::reconstruction::youngCartesian::reconstruct(bool forceUpdate)
{
    const bool uptodate = alreadyReconstructed(forceUpdate);

    if (uptodate && !forceUpdate)
    {
        return;
    }

    if (mesh_.topoChanging())
    {
        // Introduced resizing to cope with changing meshes
        //if(interfaceCell_.size() != mesh_.nCells())
        //{
        //    interfaceCell_.resize(mesh_.nCells());
        //}
      Info<<"Dynamic mesh is not supported!"<<endl;
      Foam::FatalError();
    }
    
    interfaceCell_ = false;

    interfaceLabels_.clear();

    forAll(alpha1_,celli)
    {
        if(sIterPLIC_.isASurfaceCell(alpha1_[celli]))
        {
            interfaceCell_[celli] = true; // is set to false earlier
            interfaceLabels_.append(celli);
        }
    }
    interfaceNormal_.setSize(interfaceLabels_.size());
    centre_ = dimensionedVector("centre", dimLength, vector::zero);
    normal_ = dimensionedVector("normal", dimArea, vector::zero);

    gradSurf(alpha1_);

    forAll(interfaceLabels_, i)
    {
        const label celli = interfaceLabels_[i];
        if (mag(interfaceNormal_[i]) == 0)
        {
            continue;
        }

        sIterPLIC_.vofCutCell
        (
            celli,
            alpha1_[celli],
            isoFaceTol_,
            100,
            interfaceNormal_[i]
        );

        if (sIterPLIC_.cellStatus() == 0)
        {
            normal_[celli] = sIterPLIC_.surfaceArea();
            centre_[celli] = sIterPLIC_.surfaceCentre();
            if (mag(normal_[celli]) == 0)
            {
                normal_[celli] = vector::zero;
                centre_[celli] = vector::zero;
            }

        }
        else
        {
            normal_[celli] = vector::zero;
            centre_[celli] = vector::zero;
        }
    }
}

void Foam::reconstruction::youngCartesian::mapAlphaField() const
{
    // without it, we seem to get a race condition
    mesh_.C();

    cutCellPLIC cutCell(mesh_);

    forAll(normal_, celli)
    {
        if (mag(normal_[celli]) != 0)
        {
            vector n = normal_[celli]/mag(normal_[celli]);
            scalar cutValue = (centre_[celli] - mesh_.C()[celli]) & (n);
            cutCell.calcSubCell
            (
                celli,
                cutValue,
                n
            );
            alpha1_[celli] = cutCell.VolumeOfFluid();

        }
    }
    alpha1_.correctBoundaryConditions();
    alpha1_.oldTime () = alpha1_;
    alpha1_.oldTime().correctBoundaryConditions();

}


// ************************************************************************* //
