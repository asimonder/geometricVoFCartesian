/*---------------------------------------------------------------------------*\
            Copyright (c) 2021, Asim Onder
-------------------------------------------------------------------------------
License
    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    generateCurvatureData

Description


Author
   Asim Onder

\*---------------------------------------------------------------------------*/

#include "fvCFD.H"

#include "OFstream.H"
#include "autoPtr.H"
#include "reconstructionSchemes.H"
#include "implicitFunction.H"
#include "cutCellImpFunc.H"
#include "cutCellIso.H"
#include "writeFile.H"
#include "symmTensor2D.H"
//#include "isoCutCell.H"

#include "interfaceForces.H"
#include "ijkZone.H"
#include "uniformStencil.H"
#include "randomWaveFieldImplicitFunction.H"
#include "reconstructedDistanceFunction.H"
//#include "OBJstream.H"
#include <ctime>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

void setAlpha
(
    const fvMesh& mesh,
    const dictionary& setAlphaFieldDict,
    volScalarField& alpha1
)
{

  Foam::autoPtr<implicitFunction> func(Foam::implicitFunction::New
				       (
					setAlphaFieldDict.get<word>("type"),
					setAlphaFieldDict
					));	    

  const cellList& cells=mesh.cells();
  const faceList& faces=mesh.faces();
  const  surfaceVectorField&  Cf = mesh.Cf();
  //label Nx=40;
  label Nx=40;
  label Ny=Nx;
  label iC=0;
  forAll(alpha1,iCell)
    {
      iC+=1;
      vector Pmin=vector::uniform(VGREAT);
      vector Pmax=vector::uniform(-VGREAT);
      for (int iF=0;iF<6;iF++)
	{
	  label f1=cells[iCell][iF];
	  Pmin.x()=Foam::min(Cf[f1].x(),Pmin.x());
	  Pmin.y()=Foam::min(Cf[f1].y(),Pmin.y());
	  Pmin.z()=Foam::min(Cf[f1].z(),Pmin.z());
	  Pmax.x()=Foam::max(Cf[f1].x(),Pmax.x());
	  Pmax.y()=Foam::max(Cf[f1].y(),Pmax.y());
	  Pmax.z()=Foam::max(Cf[f1].z(),Pmax.z());
	}

      scalar dxC=(Pmax.x()-Pmin.x());

      scalar dx=dxC/Nx;

      //printf("proc=%d: iCell=%d/%d, dx=%f, dxC=%f\n",Pstream::myProcNo(),iC, mesh.nCells(),dx,dxC);
      
      scalar V=dxC*dxC*dxC;
      vector P0=Pmin+vector(dx/2.,dx/2.,0);
      scalar sum=0;
      scalar Hmax=-VGREAT;
      scalar Hmin=VGREAT;
      for (int i=0;i<Nx;i++)
	    {
	      for (int j=0;j<Ny;j++)
		{
		  vector Pc=P0+vector(dx*i,dx*j,0);
		  scalar val=func->value(Pc);
		  Hmax=Foam::max(Hmax,val);
		  Hmin=Foam::min(Hmin,val);
		  //if (Pstream::master())
		  //  printf("proc=%d: iCell=%d/%d, H=%f\n",Pstream::myProcNo(),iC, mesh.nCells(),val);
		  if (val<0.0)
		    continue;
		  else if (val>dxC)
		    sum+=dxC*dx*dx;
		  else
		    sum+=val*dx*dx;
		}
	    }
      Info<<"iCell="<<iC<<"/"<<mesh.nCells()<<", Hmax="<<Hmax+Pmin.z()<<",  Hmin="<<Hmin+Pmin.z()<<endl;
      if(sum/V>1.0)
	{
	  //Info<<"Something wrong: alpha="<<sum/V<<endl;
	  alpha1[iCell]=1.0;
	}
      else
	alpha1[iCell]=sum/V;
    }

  alpha1.correctBoundaryConditions();
}


///////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char *argv[])
{
//    #include "addRegionOption.H"
    #include "setRootCase.H"
    #include "createTime.H"
    #include "createMesh.H"
    #include "createControl.H"
    #include "createFields.H"
 
    #include "createTimeControls.H"
    #include "readTimeControls.H"
    #include "CourantNo.H"
    #include "setInitialDeltaT.H"

  ijkZone ijkMesh(mesh);
  const vector Pmin=ijkMesh.Pmin();  
  const vector Pmax=ijkMesh.Pmax();
  const scalar dx=ijkMesh.dx();
  const scalar pi=constant::mathematical::pi;
  word setAlphaMethod = fvSolutionDict.get<word>("setAlphaMethod");
  if (setAlphaMethod != "cutCellImpFunc" && setAlphaMethod != "cutCellIso")
    {
      FatalError  << "valid choice are only cutCellImpFunc or cutCellIso"
		  << abort(FatalError);
    }

  scalar amplitude=setAlphaFieldDict.get<scalar>("amplitude");
  scalar mwl=setAlphaFieldDict.get<scalar>("waterLevel");
  scalar interfaceTol=setAlphaFieldDict.get<scalar>("interfaceTol");
  label sampleRate=setAlphaFieldDict.get<label>("sampleRate");
  //setting the waves
  label Nk=setAlphaFieldDict.get<label>("Nk");
  label Nwaves=(2*Nk+1)*(Nk+1);
  List<scalar>kx(Nwaves,0.0);
  List<scalar>ky(Nwaves,0.0);
  List<scalar> comps(Nwaves,0.0);
  List<scalar> phases(Nwaves,0.0);

  label iC=0;
  for(int i=-Nk;i<Nk+1;i++)
    {
    for(int j=0;j<Nk+1;j++)
      {
	kx[iC]=2.0*pi*i; //L=1 hard coded!
	ky[iC]=2.0*pi*j;
	iC+=1;
      }
    }
  setAlphaFieldDict.add<List<scalar>>("kx",kx);
  setAlphaFieldDict.add<List<scalar>>("ky",ky);
  setAlphaFieldDict.add<List<scalar>>("comps",comps);
  setAlphaFieldDict.add<List<scalar>>("phases",phases);
  
  //word fName="curvData_N_%d_kMax_%d"%(ijkMesh.Nx(),kMax);
  //Foam::functionObjects::writeFile writeObj(mesh, "waveCurvatureData", "curvDataset");
  
  //Info<<"seed="<<(unsigned) time(0)<<endl;
  //Random rndCentre((unsigned) time(0)); //1234567);
  //printf("proc=%d: seed=%d\n",Pstream::myProcNo(),(unsigned) time(0));
  //Random rndCentre(1234567);
  label seed=0;
  if (Pstream::master())
    seed=(unsigned) time(0);
  Foam::reduce(seed, maxOp<label>());
  Info<<"seed="<<(unsigned) time(0)<<endl;
  Random rndCentre(seed); 
  

  scalar recTime = 0;
  label nIter=setAlphaFieldDict.get<label>("nIter");;
  label nMax=1;
  boolList interfaceCells(mesh.nCells(),false);
  uniformStencil stencil(mesh,ijkMesh,nMax);
  
  autoPtr<reconstructionSchemes> surf =
    reconstructionSchemes::New(alpha1,phi,U,fvSolutionDict);

  interfaceForces surfForces(alpha1,U,transportProperties);
  //reconstructedDistanceFunction RDF_(mesh);
  
  while (runTime.run())
    {
      runTime++;
      //for(int iteration = 0;iteration < nIter;iteration++)
      //	{
      //  Info<<"iter="<<iteration<<"/"<<nIter<<endl;
	  
      forAll(comps,i)
	{
	  comps[i]=rndCentre.globalPosition<scalar>(0,1); 
	  phases[i]=rndCentre.globalPosition<scalar>(0,2*constant::mathematical::pi); 
	}

      scalar compsL2=0;
      forAll(comps,i)
	compsL2+=Foam::sqr(comps[i]);

      //Foam::reduce(compsL2, sumOp<scalar>());
      comps=comps/Foam::sqrt(compsL2)*amplitude;
	  
      setAlphaFieldDict.set<List<scalar>>("comps",comps);
      setAlphaFieldDict.set<List<scalar>>("phases",phases);
	  
      Info<<"Setting alpha field..."<<endl;
	  //setAlpha(cutCell,mesh,setAlphaFieldDict,alpha1);
      setAlpha(mesh,setAlphaFieldDict,alpha1);	  
      Foam::implicitFunctions::randomWaveFieldImplicitFunction waveField(amplitude,
									 mwl,
									 phases,
									 comps,
									 kx,
									 ky);


      recTime += mesh.time().cpuTimeIncrement();
      Info<<"recTime="<<recTime<<endl;
	  
      Info<<"Calculating stencils..."<<endl;
      //select interfacecells
      interfaceCells=false;
      label cInt=0;
      forAll (alpha1,iCell)
	{
	  if (alpha1[iCell]>interfaceTol and alpha1[iCell]<1-interfaceTol)
	    {
		  interfaceCells[iCell]=true;
		  cInt+=1;
			      
	    }
	}
      Info<<"number of sampled interface cells="<<cInt<<endl;
      Map<scalar> alphaIJK;
      Vector<label> stencilSize(nMax,nMax,nMax);
      ijkMesh.getZoneField(interfaceCells,alphaIJK,alpha1,stencilSize);
      recTime += mesh.time().cpuTimeIncrement();
      Info<<"recTime="<<recTime<<endl;
      
      Info<<"Calculating curvatures..."<<endl;
      //interface reconstruction
      surf->reconstruct();
      const volVectorField& faceNormal = surf->normal();
      const boolList& interfaceCells = surf->interfaceCell();
      /*RDF_.markCellsNearSurf(interfaceCells,1);
      RDF_.constructRDF
	(
	 nextToInterface_,
	 centre_,
	 normal_,
	 exchangeFields_,
	 false
	 );*/

      //volScalarField RDF = mesh.lookupObjectRef<volScalarField>("RDF");
      //Map<scalar> rdfIJK;
      //ijkMesh.getZoneField(interfaceCells,rdfIJK,RDF,stencilSize);
      
      //calculate surface tension
      surfForces.correct();
      surfForces.surfaceTensionForce(); // update curvature	  
      recTime += mesh.time().cpuTimeIncrement();
      volScalarField curvHF = mesh.lookupObjectRef<volScalarField>("K_");
      
      List<scalar> A;
      //List<scalar> Df;
      scalar curv=0;
      scalar curvMax=0;

      //if (Pstream::master())
	//fprintf(writeObj,"\# G.x(),G.y(),curv*dx,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],Df[0],Df[1],Df[2],Df[3],Df[4],Df[5],Df[6],Df[7],Df[8],Df[9],Df[10],Df[11],Df[12],Df[13],Df[14],Df[15],Df[16],Df[17],Df[18],Df[19],Df[20],Df[21],Df[22],Df[23],Df[24],Df[25],Df[26]\n");

      FILE *writeObj;
      string fName="datasets/curvDataset_amp"+std::to_string(amplitude)+"_Nk"+std::to_string(Nk)+"_"+std::to_string(Pstream::myProcNo())+".dat";
      if (Pstream::parRun())
	{
	  string dictPath=runTime.path()/".."/fName;
	  writeObj = fopen (dictPath.c_str(),"a");
	}
      else
	{
	  string dictPath=runTime.path()/fName;
	  writeObj = fopen (dictPath.c_str(),"a");
	}

      cInt=0
      forAll(interfaceCells,iCell)		
	{
	  if(interfaceCells[iCell] && cInt%sampleRate==0)
	    {
	      stencil.setStencil(alphaIJK,ijkMesh.ijk3(iCell));
	      A=stencil.getStencil();
	      // stencil.setStencil(rdfIJK,ijkMesh.ijk3(iCell));
	      //Df=stencil.getStencil();
	      //Df=Df/dx;
	      curv=waveField.curvature(mesh.C()[iCell]);
	      vector n = faceNormal[iCell];	      
	      vector G=waveField.grad(mesh.C()[iCell]);
	      
	      symmTensor2D H=waveField.hessian(mesh.C()[iCell]);
	      /*fprintf(writeObj,"%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e\n",G.x(),G.y(),curv*dx,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26],Df[0],Df[1],Df[2],Df[3],Df[4],Df[5],Df[6],Df[7],Df[8],Df[9],Df[10],Df[11],Df[12],Df[13],Df[14],Df[15],Df[16],Df[17],Df[18],Df[19],Df[20],Df[21],Df[22],Df[23],Df[24],Df[25],Df[26]);*/
	      fprintf(writeObj,"%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e,%.12e\n",G.x(),G.y(),H.xx(),H.yy(),H.xy(),curv*dx,A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],A[16],A[17],A[18],A[19],A[20],A[21],A[22],A[23],A[24],A[25],A[26]);

	      curvMax=max(curvMax,curv);
	    }
	  cInt+=1;
	}	  
      fclose(writeObj);

      Info<<"curvMax*dx="<<curvMax*dx<<endl;
      recTime += mesh.time().cpuTimeIncrement();
      Info<<"recTime="<<recTime<<endl;		
      
    }
  runTime.write();

  Info<< "End\n" << endl;
  return 0;
}


// ************************************************************************* //
