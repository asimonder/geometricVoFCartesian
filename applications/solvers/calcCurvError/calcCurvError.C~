/*---------------------------------------------------------------------------*\
            Copyright (c) 2021, Asim Onder
-------------------------------------------------------------------------------
License
    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    calcCurvError

Description
    Calculating the curvature for cyclinders and spheres.

Author
    Asim Onder

\*---------------------------------------------------------------------------*/

#include "fvCFD.H"

#include "OFstream.H"
#include "autoPtr.H"
#include "reconstructionSchemes.H"
#include "implicitFunction.H"
//#include "cutCellImpFunc.H"
#include "cutCellIso.H"
#include "reconstructionError.H"
//#include "isoCutCell.H"

#include "interfaceForces.H"
//#include "OBJstream.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

void setAlpha
(
    const fvMesh& mesh,
    const dictionary& setAlphaFieldDict,
    volScalarField& alpha1
)
{

  Foam::autoPtr<implicitFunction> func(Foam::implicitFunction::New
				       (
					setAlphaFieldDict.get<word>("type"),
					setAlphaFieldDict
					));	    
  word functionType (setAlphaFieldDict.lookup("type"));
  bool is2D=(functionType == "cylinder");
  const vector origin=setAlphaFieldDict.get<vector>("origin");
  scalar radius=setAlphaFieldDict.get<scalar>("radius");
  const cellList& cells=mesh.cells();
  const faceList& faces=mesh.faces();
  const  surfaceVectorField&  Cf = mesh.Cf();
  scalar dx=0.0;
  label Nx=2000;
  label Ny=Nx;
  if (is2D)
    Ny=1;
  label Nz=Nx;

  //only works for uniform hexa cells aligned with Cartesian directions
  forAll(alpha1,iCell)
    {
      vector Pmin=vector::uniform(VGREAT);
      vector Pmax=vector::uniform(-VGREAT);
      for (int iF=0;iF<6;iF++)
	{
	  label f1=cells[iCell][iF];
	  Pmin.x()=Foam::min(Cf[f1].x(),Pmin.x());
	  Pmin.y()=Foam::min(Cf[f1].y(),Pmin.y());
	  Pmin.z()=Foam::min(Cf[f1].z(),Pmin.z());
	  Pmax.x()=Foam::max(Cf[f1].x(),Pmax.x());
	  Pmax.y()=Foam::max(Cf[f1].y(),Pmax.y());
	  Pmax.z()=Foam::max(Cf[f1].z(),Pmax.z());
	}

      dx=(Pmax.x()-Pmin.x())/Nx;
      //Info<<"dx="<<dx<<endl;
      
      vector P0=Pmin+vector(dx/2.,dx/2.,dx/2.);
      scalar sum=0;
      for (int i=0;i<Nx;i++)
	{
	  for (int j=0;j<Ny;j++)
	    {
	      for (int k=0;k<Nz;k++)
		{
		  vector Pc=P0+vector(dx*i,dx*j,dx*k);
		  /* scalar val=func->value(Pc);
		     if (val>=0)*/
		  if (mag(Pc-origin)<radius)
		      sum+=1.0;
		}
	    }
	}
      alpha1[iCell]=sum/(Nx*Ny*Nz);
    }

  alpha1.correctBoundaryConditions();

}

int main(int argc, char *argv[])
{
//    #include "addRegionOption.H"
    #include "setRootCase.H"
    #include "createTime.H"
    #include "createMesh.H"
    #include "createControl.H"


  IOdictionary setAlphaFieldDict
    (
        IOobject
        (
            "setAlphaFieldDict",
            mesh.time().system(),
            mesh,
            IOobject::MUST_READ,
            IOobject::NO_WRITE
        )
	);


// init
    Info<< "Reading field U\n" << endl;
    volVectorField U
    (
        IOobject
        (
            "U",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::NO_WRITE
        ),
        mesh
    );

    #include "createPhi.H"

    Info<< "Reading field alpha1\n" << endl;
    volScalarField alpha1
    (
        IOobject
        (
            "alpha1",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    );

    IOdictionary transportProperties
    (
        IOobject
        (
            "transportProperties",
            U.time().constant(),
            U.db(),
            IOobject::MUST_READ_IF_MODIFIED,
            IOobject::NO_WRITE
        )
    );

    reconstructionError recErr( mesh,mesh,setAlphaFieldDict);

    #include "createTimeControls.H"
    #include "readTimeControls.H"
    #include "CourantNo.H"
    #include "setInitialDeltaT.H"

    IOdictionary fvSolutionDict
    (
        IOobject
        (
            "fvSolution",
            alpha1.time().system(),
            alpha1.db(),
            IOobject::MUST_READ_IF_MODIFIED,
            IOobject::NO_WRITE
        )
    );
    
    autoPtr<reconstructionSchemes> surf =
        reconstructionSchemes::New(alpha1,phi,U,fvSolutionDict);

    interfaceForces surfForces(alpha1,U,transportProperties);


    word functionType (setAlphaFieldDict.lookup("type"));
    bool twoDim = (functionType == "cylinder");
    Info << "twoDim = " << twoDim << endl;
    Info << "functionType = " << functionType << endl;

    scalar recTime = 0;

    while (runTime.run())
    {

        runTime++;

	/*centre = setAlphaFieldDict.get<vector>("origin");	
	Info << "centre " <<  centre << endl;
	Foam::autoPtr<implicitFunction> func(Foam::implicitFunction::New
					     (
					      setAlphaFieldDict.get<word>("type"),
					      setAlphaFieldDict
					      ));	    
	scalarField f(mesh.nPoints(),0.0);
	forAll(f,pI)
	  {
	    f[pI]=func->value(mesh.points()[pI]);
	    //Info<<"f["<<pI<<"]="<<f[pI]<<endl;
	  }
	  cutCellIso cutCell(mesh,f);*/
	
	setAlpha(mesh,setAlphaFieldDict,alpha1);
	

	mesh.time().cpuTimeIncrement();

	//interface reconstruction
	surf->reconstruct();

	//calculate surface tension
	surfForces.correct();
	surfForces.surfaceTensionForce(); // update curvature

	recTime += mesh.time().cpuTimeIncrement();

	volScalarField curv = mesh.lookupObjectRef<volScalarField>("K_");


	//errors
	recErr.calcError(setAlphaFieldDict,surf->centre(),surf->normal(),curv,false);
        recErr.write(recTime,scalar(0));


        runTime.write();

    }


    Info<< "End\n" << endl;

    return 0;
}


// ************************************************************************* //
