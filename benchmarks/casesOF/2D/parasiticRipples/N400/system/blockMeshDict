/*--------------------------------*- C++ -*----------------------------------* \
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

L #calc "0.05";
Ha #calc "0.075";
Hw #calc "-0.075";
Hf #calc "0.0";
W #calc "0.0005";

vertices
(
 ( 0  0 $Hf)//0
 ($L  0 $Hf)//1
 ($L $W $Hf)//2
 ( 0 $W $Hf)//3
 ( 0  0 $Ha)//4
 ($L  0 $Ha)//5
 ($L $W $Ha)//6
 ( 0 $W $Ha)//7
 ( 0  0 $Hw)//8
 ($L  0 $Hw)//9
 ($L $W $Hw)//10
 ( 0 $W $Hw)//11
);

blocks
(
 hex (0 1 2 3 4 5 6 7) (100 1 150) simpleGrading (1 1 1)
 hex (8 9 10 11 0 1 2 3) (100 1 150) simpleGrading (1 1 1)
 //hex (0 1 2 3 4 5 6 7) (40 8 12) simpleGrading (1 1 1)
 //  hex (8 9 10 11 0 1 2 3) (40 8 20) simpleGrading (1 1 1)
 // hex (0 1 2 3 4 5 6 7) (10 2 3) simpleGrading (1 1 1)
 // hex (8 9 10 11 0 1 2 3) (10 2 5) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    waterWall
    {
        type            wall;
        faces           ((8 9 10 11));
    }
    topWall
    {
        type            wall;
        faces           ((4 5 6 7));
    }
    sides1
    {
      //type            cyclic;
      //neighbourPatch  sides2;
      type empty;
      faces           ((1 5 4 0)
		       (8 9 1 0));
    }
    sides2
    {
      //type            cyclic;
      //neighbourPatch  sides1;
      type empty;
      faces           ((3 6 7 2)
			 (10 11 3 2));
    }    
    inout1
    {
        type            cyclic;
        neighbourPatch  inout2;
        faces           ((0 4 7 3)
			 (0 8 11 3));
	//transform noOrdering;//translational; //coincidentFullMatch;
    }
    inout2
    {
        type            cyclic;
        neighbourPatch  inout1;
        faces           ((2 5 6 1)
			 (2 9 10 1));
	//transform noOrdering;//translational; //coincidentFullMatch;
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
