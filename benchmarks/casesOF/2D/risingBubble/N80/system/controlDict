'/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
application     interIsoCartFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         3;

deltaT          0.002;

writeControl    adjustableRunTime;

writeInterval   0.02;

purgeWrite      0;

writeFormat     binary;

writePrecision  12;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.025;
maxAlphaCo      0.025;

maxDeltaT       1;
// ************************************************************************* //

// functionObjects
functions
{
    // **************************************************** //
    // **** coded functionObject for bubble processing **** //
    // **************************************************** //
    bubblepproc
    {
        // Load the library containing the 'coded' functionObject
        libs ("libutilityFunctionObjects.so");
        type coded;
        writeControl    adjustableRunTime;
        writeInterval   0.002;
        // Name of on-the-fly generated functionObject
        name bubblepproc;
        // List of include search directories
        codeOptions
        #{
            -I$(LIB_SRC)/sampling/lnInclude \
            -I$(LIB_SRC)/dynamicMesh/lnInclude \
            -I$(LIB_SRC)/surfMesh/lnInclude
        #};
        // List of libraries to link with
        codeLibs
        #{
            -lsampling \
            -ldynamicMesh \
            -lsurfMesh
        #};
        // List of include files
        codeInclude
        #{
            #include "sampledIsoSurface.H"
            #include "vtkSurfaceWriter.H"
        #};
        // Code
        codeWrite
        #{
            Info << "----------bubblepproc----------" << endl;

            // Lookup velocity field U
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            // Lookup liquid fraction alpha_liquid
            const volScalarField& alphaLiquid = mesh().lookupObject<volScalarField>("alpha.phase1");

            // Compute weight (= gas fraction)
            volScalarField weight
            (
                IOobject
                (
                    "weight",
                    mesh().time().timeName(),
                    U.mesh(),
                    IOobject::NO_READ,
                    IOobject::NO_WRITE
                ),
                (1-alphaLiquid)
            );

            // Compute isosurface alpha=0.5
            dictionary isoSurfDict;
            isoSurfDict.add("type","isoSurface");
            isoSurfDict.add("isoField","alpha.phase1");
            isoSurfDict.add("isoValue",0.5);
            isoSurfDict.add("regularise","diagcell");
	    isoSurfDict.add("interpolate","true");
            sampledIsoSurface isoInterface("isoInterface", mesh(), isoSurfDict);
            isoInterface.update();

            // Debug output of isosurface in vtk format
            if ( mesh().time().writeTime() && false )
            {
              // Create output file name and directory
              const fileName outputPath(mesh().time().globalPath()/functionObject::outputPrefix/"bubblepproc_DEBUG"/mesh().time().timeName());
              mkDir(outputPath);
              const fileName outputName(outputPath/isoInterface.name());
              Info << "Writing debug surface: " << outputName << nl;
              // Write file in vtk format
              bool parallel = Pstream::parRun();
              dictionary vtkWriterOptions;
              vtkWriterOptions.add("format","ascii");
              surfaceWriters::vtkWriter writerDebug(isoInterface,outputName,parallel,vtkWriterOptions);
              writerDebug.write();
            }

            // Compute bubble volume
            dimensionedScalar bubbleVolume = fvc::domainIntegrate(weight); // This is integral of "weight" over the volume
            Info << "bubble volume     = " << bubbleVolume.value() << endl;

            // Compute bubble area
            dimensionedScalar bubbleArea = isoInterface.area();
            Info << "bubble area       = " << bubbleArea.value() << endl;

            // Compute bubble center
            dimensionedVector Cb = fvc::domainIntegrate(weight*mesh().C())/bubbleVolume;
            Info << "bubble centroid   = " << Cb.value() << endl;

            // Compute rising velocity
            dimensionedVector Ub = fvc::domainIntegrate(weight*U)/bubbleVolume;
            Info << "bubble velocity   = " << Ub.value() << endl;

            // Compute radius of area equivalent circle (from bubble volume)
            scalar diffEmptyPatches = mesh().bounds().minDim(); // Size of cells along z direction
            dimensionedScalar radiusA = sqrt(bubbleVolume/constant::mathematical::pi/diffEmptyPatches);
            Info << "bubble diameter A = " << radiusA.value()*2.0 << endl;

            // Compute radius of bubble (from bubble surface)
            dimensionedScalar radiusB = bubbleArea/diffEmptyPatches/2.0/constant::mathematical::pi;
            Info << "bubble diameter B = " << radiusB.value()*2.0 << endl;

            // Compute degree of circularity
            if ( radiusB.value() != 0.0 )
            Info << "bubble circularity= " << radiusA.value()/radiusB.value() << endl;

            Info << "----------bubblepproc----------\n" << endl;

        #};
    }

    // ******************************************************** //
    // **** sample functionObject for extracting isocurves **** //
    // ******************************************************** //
    isosurfaces
    {
        type            surfaces;
        libs ("libsampling.so");
        writeControl    writeTime;

        surfaceFormat   raw;
        fields          ( p U );

        // interpolationScheme. choice of
        //      cell          : use cell-centre value only; constant over cells (default)
        //      cellPoint     : use cell-centre and vertex values
        //      cellPointFace : use cell-centre, vertex and face values.
        //      pointMVC      : use point values only (Mean Value Coordinates)
        //      cellPatchConstrained : like 'cell' but uses cell-centre except on
        //                             boundary faces where it uses the boundary value.
        //      cellPointWallModified: like 'cell' but uses cell-centre except on
        //                             walls faces where it uses the wall value.
        interpolationScheme cellPointFace;

        // Surface sampling definition
        //
        // 1] patches are not triangulated by default
        // 2] planes are always triangulated
        // 3] iso-surfaces are always triangulated
        surfaces
        (
          constantIso
          {
              // Iso surface for constant values.
              // Triangles guaranteed not to cross cells.
              type            isoSurface;
              isoField        alpha.phase1;
              isoValue        0.5;
              interpolate     true;
              regularise      true;
          }
        );
    }
}

// ************************************************************************* //
