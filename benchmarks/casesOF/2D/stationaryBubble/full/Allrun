#!/bin/sh
cd ${0%/*} || exit 1                        # Run from this directory
. $WM_PROJECT_DIR/bin/tools/RunFunctions    # Tutorial run functions

application=$(getApplication)

restore0Dir

runApplication blockMesh
runApplication setFields
runApplication setAlphaField

if [ `getNumberOfProcessors` -gt 1 ]; then
  runApplication decomposePar -force
  runParallel ${application}
  runApplication reconstructPar -noFunctionObjects
  rm -rf processor*
else
  runApplication ${application}
fi

# Post processing
grep -e '^Time =' -e '^droplet volume'   log.${application}                        | awk -F'=' '/Time =/ {t=$NF}  /droplet volume/   {print t" "$NF}' > droplet_volume.dat
grep -e '^Time =' -e '^droplet area'     log.${application}                        | awk -F'=' '/Time =/ {t=$NF}  /droplet area/     {print t" "$NF}' > droplet_area.dat
grep -e '^Time =' -e '^droplet diam.* A' log.${application}                        | awk -F'=' '/Time =/ {t=$NF}  /droplet diam.* A/ {print t" "$NF}' > droplet_diameterA.dat
grep -e '^Time =' -e '^droplet diam.* B' log.${application}                        | awk -F'=' '/Time =/ {t=$NF}  /droplet diam.* B/ {print t" "$NF}' > droplet_diameterB.dat
grep -e '^Time =' -e '^droplet centroid' log.${application} | sed -e 's/[\(\)]//g' | awk -F'=' '/Time =/ {t=$NF}  /droplet centroid/ {print t" "$NF}' > droplet_centroid.dat
grep -e '^Time =' -e '^droplet velocity' log.${application} | sed -e 's/[\(\)]//g' | awk -F'=' '/Time =/ {t=$NF}  /droplet velocity/ {print t" "$NF}' > droplet_velocity.dat
grep -e '^Time =' -e '^droplet circular' log.${application} | sed -e 's/[\(\)]//g' | awk -F'=' '/Time =/ {t=$NF}  /droplet circular/ {print t" "$NF}' > droplet_circularity.dat

# Control of CFL
grep '^Courant Number mean'           log.${application} | awk '{print $NF}' > maxCFL.dat
grep '^Interface Courant Number mean' log.${application} | awk '{print $NF}' > maxICFL.dat


# Max of velocity components with its location
input="postProcessing/minMaxComponents/0/fieldMinMax.dat"
output="postProcessing/minMaxComponents/0/U_MinMax.dat"
echo "# Time       max       location(max)" > $output
if [ `getNumberOfProcessors` -gt 1 ]; then
  cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{print $1" "$10" "$11" "$12" "$13" "$14" "$15}' >> $output
else
  cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{print $1" "$9" "$10" "$11" "$12" "$13" "$14}' >> $output
fi


# Max of velocity magnitude with its location
input="postProcessing/minMaxMagnitude/0/fieldMinMax.dat"
output="postProcessing/minMaxMagnitude/0/magU_MinMax.dat"
echo "# Time       max       location(max)" > $output
if [ `getNumberOfProcessors` -gt 1 ]; then
  cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{print $1" "$8" "$9" "$10" "$11}' >> $output
else
  cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{print $1" "$7" "$8" "$9" "$10}' >> $output
fi


# Compute max spurious capillary number and compute t*
# Get simulation global data
D="0.8" # Diameter of the initial bubble
sigma=`grep 'sigma.*\[' constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g'`
rho=`grep rho constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | head -1`
nu=` grep nu  constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | head -1`
Usigma=`echo $sigma $rho $nu | awk '{ printf("%.16G\n", $1/($2*$3)) }'`          # U_sigma = sigma/(rho*nu), used by Abadie
tsigma=`echo $rho $sigma $D | awk '{ printf("%.16G\n",sqrt($1*$3*$3*$3/$2)) }'`  # t_sigma = sqrt(rho*D^3/sigma), used by Abadie

# Compute max spurious capillary number and compute t*
input="postProcessing/minMaxMagnitude/0/magU_MinMax.dat"
output="postProcessing/minMaxMagnitude/0/t_star.vs.Ca_max.dat"
echo "# t_star       Ca_max" > $output
cat $input | grep -v '^#' | sed -e 's/[()]//g' | awk '{ printf("%.16G %.16G\n", $1/'"${tsigma}"',$2/'"${Usigma}"') }' >> $output

#------------------------------------------------------------------------------
