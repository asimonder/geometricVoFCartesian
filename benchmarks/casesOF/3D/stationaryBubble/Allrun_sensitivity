#!/bin/sh

# Clean-up current working directory
Allclean

# Prepare all running directories for sensitivity study

# Loop over mesh size
for size in 25 32 42 50 64 75 100 128
do
  # Set sizes
  xsize=$size
  zsize=$size
  ysize=$size
  
  # Fluid properties
  sigma=`grep 'sigma.*\[' constant/transportProperties | awk '{print $NF}' | sed -e 's/;//g' | tail -1`
  D="0.8" # Diameter of the initial bubble

  # Choose list of densities for fluid
  rholist="1"
  #rholist="1 10 100 1000"
  
  tagrho=`echo $rholist | awk '{if(NF<=1) printf("false\n"); else printf("true\n")}'`
  for rho in $rholist
  do
  
    # Loop over Laplace numbers
    for Laplace in 1.2 12 120 1200 12000
    do
      # Compute viscosity from Laplace number
      nu=`echo $rho $sigma $Laplace $D | awk '{ printf("%.16G\n",sqrt($4*$2/($1*$3))) }'`  # nu = sqrt(D*sigma/(La*rho))

      # Compute non-dimensional variables
      # Inviscid (nu .eq. 0)
      tsigma=`echo $rho $sigma $D | awk '{ printf("%.16G\n",sqrt($1*$3*$3*$3/$2)) }'`  # t_sigma = sqrt(rho*D^3/sigma), used by Abadie
      #Usigma=`echo $rho $sigma $D | awk '{ printf("%.16G\n",sqrt($2/($1*$3))) }'`     # U_sigma = sqrt(sigma/(rho*D)), used by Popinet
      # Viscous  (nu .ne. 0)
      #tsigma=`echo $rho $sigma $D $nu | awk '{ printf("%.16G\n",$1*$3*$4/$2) }'`      # t_sigma = rho*D*nu/sigma
      #tsigma=`echo $D $nu | awk '{ printf("%.16G\n",$1*$1/$2) }'`                     # t_sigma = D^2/nu, used by Popinet
      Usigma=`echo $sigma $rho $nu | awk '{ printf("%.16G\n", $1/($2*$3)) }'`          # U_sigma = sigma/(rho*nu), used by Abadie

      # Compute simulation end time
      endTime=`      echo $tsigma | awk '{ printf("%.16G\n",100.0*$1) }'` # Corresponds to 100 times t_sigma
      writeInterval=`echo $tsigma | awk '{ printf("%.16G\n", 10.0*$1) }'` # Corresponds to 10  times t_sigma

      # Compute simulation time step to match max CFL requested in controlDict
      maxCo=`grep maxCo system/controlDict | awk '{print $NF}' | sed -e 's/;//g'`
      #deltaT=`echo $maxCo $size $Usigma | awk '{ printf("%.16G\n",$1/($2*$3)) }'` # CFL=U*dt/dx ==> dt=CFL/(U*size) based on normalisation values. CURRENTLY UNUSED

      # If we use the stability criterion of Popinet, then dt = sqrt(rho*dx^3/(pi*sigma))
      # Number of time steps for a writeInterval : 
      #    (10 * tsigma)/dt = 10 sqrt(rho*D^3/sigma) / sqrt(rho*dx^3/(pi*sigma)) = 10 sqrt(pi*D^3/dx^3)
      # Then round this number of time steps to the nearest 1000, and divide by CFL (security factor) read from controlDict :
      nbdtInterval=`echo $maxCo $size $D | awk '{ printf("%d\n",1000*int(sqrt(3.14159265359*$3*$3*$3*$2*$2*$2)/$1/100.0)) }'`
      deltaT=`echo $writeInterval $nbdtInterval | awk '{ printf("%.16G\n",$1/$2) }'`

      # Copy to running directory
      for application in interIsoFoam interFoam interFlow
      do
        RESULTS="RESULTS_${application}/"`printf "%3.3d" ${xsize}`"x"`printf "%3.3d" ${ysize}`"x"`printf "%3.3d" ${zsize}`"_La=$Laplace"
        if  [ "$tagrho" = "true" ]; then
          RESULTS=${RESULTS}"_rho=$rho"
        fi
        if [ ! -d $RESULTS ]; then
          mkdir -p $RESULTS
          cp -ra 0.orig system constant Allrun Allclean $RESULTS
          # Replace by values for this case
          sed -i "/^nx/ s/nx.*[0-9]*;/nx $size;/1"                            $RESULTS/system/blockMeshDict
          sed -i "s/^application.*$/application     ${application};/"         $RESULTS/system/controlDict
          sed -i "s/^endTime.*$/endTime         ${endTime};/"                 $RESULTS/system/controlDict
          sed -i "s/^deltaT.*$/deltaT          ${deltaT};/"                   $RESULTS/system/controlDict
          sed -i "s/^writeInterval.*$/writeInterval   ${writeInterval};/"     $RESULTS/system/controlDict
          sed -i "s/nu.*;$/nu              nu [0 2 -1 0 0 0 0] ${nu};/g"      $RESULTS/constant/transportProperties
          sed -i "s/rho.*;$/rho             rho [1 -3 0 0 0 0 0] ${rho};/g"   $RESULTS/constant/transportProperties

          # Special things for PLIC-RDF
          if [ $application = "interFlow" ]; then
            cat >> $RESULTS/constant/transportProperties << EOF
surfaceForces
{
  sigma ${sigma};
  curvatureModel RDF;
  accelerationModel gravity;
  gravity (0 0 0);
  deltaFunctionModel alphaCSF;
}
EOF
            mv -f $RESULTS/system/fvSolution.interFlow $RESULTS/system/fvSolution
          else
            rm -f $RESULTS/system/fvSolution.interFlow
          fi

          # Set the number of processors
          case $size in
            100) numberOfSubdomains=4 ;;
            128) numberOfSubdomains=8 ;;
              *) numberOfSubdomains=1 ;;
          esac
          sed -i "s/^numberOfSubdomains.*;$/numberOfSubdomains ${numberOfSubdomains};/" $RESULTS/system/decomposeParDict

        else
          echo "Directory $RESULTS already exists !! Not overwritten !!"
        fi
      done
    done
  done
done

